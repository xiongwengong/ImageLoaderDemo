apply plugin: 'jacoco'
/**
 * The correct path of the report is $rootProjectDir/app/build/reports/jacoco/index.html
 * to run this task use: ./gradlew clean jacocoTestReport
 */
jacoco {
    toolVersion = "0.8.7"
}

def fileFilter = [
        //Classes I intentionally don't want to test
        '**/*Application.*',
        '**/*Activity**',
        '**/BuildConfig.*',
        '**/*Fragment**',
        '**/*View.*',
        '**/*Adapter**',
        '**/extension/**',
        '**/factory/*.*',
        '**/utils/*.*',
        '**/*_*Factory*.*',
        '**/*Component*.*',
        '**/*Module*.*',
        '**/model/**'
]

def mainSrc = "${project.projectDir}/src/main/java"
def debugSrc = "${project.projectDir}/src/debug/java"

def javaDebugTree = fileTree(dir: "${buildDir}/intermediates/javac/debug", excludes: fileFilter)
def kotlinDebugTree = fileTree(dir: "$buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)

task jacocoTestReport(type: JacocoReport, dependsOn: ["testDebugUnitTest"]) {
    group = "Reporting"

    reports {
        xml.enabled = true
        html.enabled = true
    }

    sourceDirectories.from = files([mainSrc, debugSrc])
    classDirectories.from = files([javaDebugTree, kotlinDebugTree])

    executionData.from = fileTree(dir: "$buildDir", includes: [
            'jacoco/testDebugUnitTest.exec',
            'outputs/code_coverage/debugAndroidTest/connected/*coverage.ec'
    ])

    doLast {
        println "Wrote HTML coverage report to ${reports.html.destination}/index.html"
        println "Wrote XML coverage report to ${reports.html.destination}"
    }
}

task openJacocoTestReport {
    group = "Reporting"

    dependsOn 'jacocoTestReport'
    doLast {
        def path = project.file("build/reports/jacoco/jacocoTestReport/html/index.html")
        exec { commandLine 'open', "$path" }
    }
}

task jacocoTestCoverageVerification(type: JacocoCoverageVerification) {
    group = "Reporting"
    dependsOn = ['jacocoTestReport']
    enabled = true

    sourceDirectories.from = files([mainSrc, debugSrc])
    classDirectories.from = files([javaDebugTree, kotlinDebugTree])

    executionData.from = fileTree(dir: "$buildDir", includes: [
            'jacoco/testDebugUnitTest.exec',
            'outputs/code_coverage/debugAndroidTest/connected/*coverage.ec'
    ])

    violationRules {
        failOnViolation = true
        rule {
            limit {
                minimum = 0.7
                counter = 'LINE'
            }
        }
    }
}

// to run coverage verification during the build (and fail when appropriate)
check.dependsOn jacocoTestCoverageVerification