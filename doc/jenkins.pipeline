pipeline {
    agent any

    stages {

//        stage('check out') {
//            steps {
//                checkout([$class           : 'GitSCM', branches: [[name: '*/master']],
//                          userRemoteConfigs: [[url: 'https://github.com/xiongwengong/ImageLoaderDemo.git']]])
//            }
//        }

        stage('Build') {
            steps {
                sh "/Users/wengong.xiong./Documents/jenkins/dev/gradle/gradle-7.2/bin/gradle clean assembleRelease  -PnotCheck=true "
            }
        }

        stage('Unit Test') {
            steps {
                echo 'execute UT'
                sh "/Users/wengong.xiong./Documents/jenkins/dev/gradle/gradle-7.2/bin/gradle jacocoTestCoverageVerification  -PnotCheck=true "

                jacoco buildOverBuild: true, classPattern: 'ImageLoader/build/intermediates/javac/debug,ImageLoader/build/tmp/kotlin-classes/debug', deltaLineCoverage: '20', minimumLineCoverage: '50', sourceInclusionPattern: '', sourcePattern: 'ImageLoader/src/main/java,ImageLoader/src/debug/java'

                //jacoco buildOverBuild: true, deltaLineCoverage: '20', minimumLineCoverage: '50', sourceInclusionPattern: '', sourcePattern: '/Users/wengong.xiong./.jenkins/workspace/ImageLoaderDemoTest-p/ImageLoader/src/main/java'
            }
        }

        stage('Deploy maven and release apk?') {
            environment {
                CAUSE = "${currentBuild.getBuildCauses()[0].shortDescription}"
                BRANCH_NAME = "${GIT_BRANCH.split("/")[1]}"
            }

            steps {
                echo "Build caused by:  ${env.CAUSE}"
                echo "current BRANCH_NAME:  ${env.BRANCH_NAME}"

                script {
                    def isMasterBranch = '${env.BRANCH_NAME}' == 'master'
                    echo "isMasterBranch = ${isMasterBranch} "
                    if (isMasterBranch) {
                        echo "build master branch need to confirm by user ---->>> "
                        input "Can be deploy into product environment?"
                    }
//                    def isTriggerByAuto = "${env.CAUSE}".startsWith('Started by GitHub push by')
//
//                    if (isTriggerByAuto) {
//                        echo "Build caused by GithubHub push}"
//                        input "Can be deploy into product environment?"
//                    }
                }
                echo " Deploy ====>>>>>>>>>>"
            }
        }

        stage('publish local maven') {
            steps {
                sh "/Users/wengong.xiong./Documents/jenkins/dev/gradle/gradle-7.2/bin/gradle publishToMavenLocal  -PnotCheck=true "
            }
        }

        stage('generate signed apk') {
            steps {
                sh "/Users/wengong.xiong./Documents/jenkins/dev/gradle/gradle-7.2/bin/gradle clean assembleRelease  -PnotCheck=true "
            }
        }
    }
}
